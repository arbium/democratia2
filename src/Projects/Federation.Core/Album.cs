//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class Album
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> GroupId
        {
            get { return _groupId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_groupId != value)
                    {
                        if (Group != null && Group.Id != value)
                        {
                            Group = null;
                        }
                        _groupId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _groupId;
    
        public virtual Nullable<System.Guid> UserId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userId != value)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                        _userId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _userId;
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual System.DateTime ChangeDate
        {
            get;
            set;
        }
    
        public virtual bool IsOpen
        {
            get { return _isOpen; }
            set { _isOpen = value; }
        }
        private bool _isOpen = false;

        #endregion

        #region Navigation Properties
    
        public virtual Group Group
        {
            get { return _group; }
            set
            {
                if (!ReferenceEquals(_group, value))
                {
                    var previousValue = _group;
                    _group = value;
                    FixupGroup(previousValue);
                }
            }
        }
        private Group _group;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual ICollection<AlbumItem> Items
        {
            get
            {
                if (_items == null)
                {
                    var newCollection = new FixupCollection<AlbumItem>();
                    newCollection.CollectionChanged += FixupItems;
                    _items = newCollection;
                }
                return _items;
            }
            set
            {
                if (!ReferenceEquals(_items, value))
                {
                    var previousValue = _items as FixupCollection<AlbumItem>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupItems;
                    }
                    _items = value;
                    var newValue = value as FixupCollection<AlbumItem>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupItems;
                    }
                }
            }
        }
        private ICollection<AlbumItem> _items;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupGroup(Group previousValue)
        {
            if (previousValue != null && previousValue.Albums.Contains(this))
            {
                previousValue.Albums.Remove(this);
            }
    
            if (Group != null)
            {
                if (!Group.Albums.Contains(this))
                {
                    Group.Albums.Add(this);
                }
                if (GroupId != Group.Id)
                {
                    GroupId = Group.Id;
                }
            }
            else if (!_settingFK)
            {
                GroupId = null;
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Albums.Contains(this))
            {
                previousValue.Albums.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Albums.Contains(this))
                {
                    User.Albums.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
            else if (!_settingFK)
            {
                UserId = null;
            }
        }
    
        private void FixupItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (AlbumItem item in e.NewItems)
                {
                    item.Album = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AlbumItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.Album, this))
                    {
                        item.Album = null;
                    }
                }
            }
        }

        #endregion

    }
}

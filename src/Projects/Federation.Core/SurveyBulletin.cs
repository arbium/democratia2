//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class SurveyBulletin
    {
        #region Primitive Properties
    
        public virtual System.Guid SurveyId
        {
            get { return _surveyId; }
            set
            {
                if (_surveyId != value)
                {
                    if (Survey != null && Survey.Id != value)
                    {
                        Survey = null;
                    }
                    _surveyId = value;
                }
            }
        }
        private System.Guid _surveyId;
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual System.Guid UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (User != null && User.Id != value)
                    {
                        User = null;
                    }
                    _userId = value;
                }
            }
        }
        private System.Guid _userId;

        #endregion

        #region Navigation Properties
    
        public virtual Survey Survey
        {
            get { return _survey; }
            set
            {
                if (!ReferenceEquals(_survey, value))
                {
                    var previousValue = _survey;
                    _survey = value;
                    FixupSurvey(previousValue);
                }
            }
        }
        private Survey _survey;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual ICollection<Option> Result
        {
            get
            {
                if (_result == null)
                {
                    var newCollection = new FixupCollection<Option>();
                    newCollection.CollectionChanged += FixupResult;
                    _result = newCollection;
                }
                return _result;
            }
            set
            {
                if (!ReferenceEquals(_result, value))
                {
                    var previousValue = _result as FixupCollection<Option>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupResult;
                    }
                    _result = value;
                    var newValue = value as FixupCollection<Option>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupResult;
                    }
                }
            }
        }
        private ICollection<Option> _result;

        #endregion

        #region Association Fixup
    
        private void FixupSurvey(Survey previousValue)
        {
            if (previousValue != null && previousValue.Bulletins.Contains(this))
            {
                previousValue.Bulletins.Remove(this);
            }
    
            if (Survey != null)
            {
                if (!Survey.Bulletins.Contains(this))
                {
                    Survey.Bulletins.Add(this);
                }
                if (SurveyId != Survey.Id)
                {
                    SurveyId = Survey.Id;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.SurveyBulletins.Contains(this))
            {
                previousValue.SurveyBulletins.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.SurveyBulletins.Contains(this))
                {
                    User.SurveyBulletins.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
        }
    
        private void FixupResult(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Option item in e.NewItems)
                {
                    if (!item.SurveyBulletins.Contains(this))
                    {
                        item.SurveyBulletins.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Option item in e.OldItems)
                {
                    if (item.SurveyBulletins.Contains(this))
                    {
                        item.SurveyBulletins.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class User : BaseUser
    {
        #region Primitive Properties
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string SurName
        {
            get;
            set;
        }
    
        public virtual string Patronymic
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> BirthDate
        {
            get;
            set;
        }
    
        public virtual string Avatar
        {
            get;
            set;
        }
    
        public virtual string Info
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> BirthAddressId
        {
            get { return _birthAddressId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_birthAddressId != value)
                    {
                        if (BirthAddress != null && BirthAddress.Id != value)
                        {
                            BirthAddress = null;
                        }
                        _birthAddressId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _birthAddressId;
    
        public virtual bool IsVerified
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> AddressId
        {
            get { return _addressId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_addressId != value)
                    {
                        if (Address != null && Address.Id != value)
                        {
                            Address = null;
                        }
                        _addressId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _addressId;
    
        public virtual string Login
        {
            get;
            set;
        }
    
        public virtual System.Guid Password
        {
            get;
            set;
        }
    
        public virtual string EncryptedEmail
        {
            get;
            private set;
        }
    
        public virtual System.Guid Salt
        {
            get;
            set;
        }
    
        public virtual bool IsEmailVerified
        {
            get;
            set;
        }
    
        public virtual string Facebook
        {
            get;
            set;
        }
    
        public virtual string LiveJournal
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> Sex
        {
            get;
            set;
        }
    
        public virtual string EncryptedPhoneNumber
        {
            get;
            private set;
        }
    
        public virtual System.DateTime RegistrationDate
        {
            get;
            set;
        }
    
        public virtual bool IsPhoneVerified
        {
            get;
            set;
        }
    
        public virtual short UTCOffset
        {
            get { return _uTCOffset; }
            set { _uTCOffset = value; }
        }
        private short _uTCOffset = 240;
    
        public virtual string Label
        {
            get;
            set;
        }
    
        public virtual bool LiveJournalSindication
        {
            get { return _liveJournalSindication; }
            set { _liveJournalSindication = value; }
        }
        private bool _liveJournalSindication = true;
    
        public virtual bool LiveJournalSindicateAsDraft
        {
            get { return _liveJournalSindicateAsDraft; }
            set { _liveJournalSindicateAsDraft = value; }
        }
        private bool _liveJournalSindicateAsDraft = false;
    
        public virtual Nullable<System.DateTime> LiveJournalSynchDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime LastActivity
        {
            get;
            set;
        }
    
        public virtual bool IsOutdated
        {
            get { return _isOutdated; }
            set { _isOutdated = value; }
        }
        private bool _isOutdated = false;
    
        public virtual bool IsForeigner
        {
            get { return _isForeigner; }
            set { _isForeigner = value; }
        }
        private bool _isForeigner = false;
    
        public virtual short QuestProgress
        {
            get;
            set;
        }
    
        public virtual bool IsQuestRejected
        {
            get { return _isQuestRejected; }
            set { _isQuestRejected = value; }
        }
        private bool _isQuestRejected = false;
    
        public virtual bool IsPayPalVerified
        {
            get { return _isPayPalVerified; }
            set { _isPayPalVerified = value; }
        }
        private bool _isPayPalVerified = false;

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<GroupMember> GroupMembers
        {
            get
            {
                if (_groupMembers == null)
                {
                    var newCollection = new FixupCollection<GroupMember>();
                    newCollection.CollectionChanged += FixupGroupMembers;
                    _groupMembers = newCollection;
                }
                return _groupMembers;
            }
            set
            {
                if (!ReferenceEquals(_groupMembers, value))
                {
                    var previousValue = _groupMembers as FixupCollection<GroupMember>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGroupMembers;
                    }
                    _groupMembers = value;
                    var newValue = value as FixupCollection<GroupMember>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGroupMembers;
                    }
                }
            }
        }
        private ICollection<GroupMember> _groupMembers;
    
        public virtual Address BirthAddress
        {
            get { return _birthAddress; }
            set
            {
                if (!ReferenceEquals(_birthAddress, value))
                {
                    var previousValue = _birthAddress;
                    _birthAddress = value;
                    FixupBirthAddress(previousValue);
                }
            }
        }
        private Address _birthAddress;
    
        public virtual ICollection<Comment> Comments
        {
            get
            {
                if (_comments == null)
                {
                    var newCollection = new FixupCollection<Comment>();
                    newCollection.CollectionChanged += FixupComments;
                    _comments = newCollection;
                }
                return _comments;
            }
            set
            {
                if (!ReferenceEquals(_comments, value))
                {
                    var previousValue = _comments as FixupCollection<Comment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupComments;
                    }
                    _comments = value;
                    var newValue = value as FixupCollection<Comment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupComments;
                    }
                }
            }
        }
        private ICollection<Comment> _comments;
    
        public virtual ICollection<Content> Contents
        {
            get
            {
                if (_contents == null)
                {
                    var newCollection = new FixupCollection<Content>();
                    newCollection.CollectionChanged += FixupContents;
                    _contents = newCollection;
                }
                return _contents;
            }
            set
            {
                if (!ReferenceEquals(_contents, value))
                {
                    var previousValue = _contents as FixupCollection<Content>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupContents;
                    }
                    _contents = value;
                    var newValue = value as FixupCollection<Content>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupContents;
                    }
                }
            }
        }
        private ICollection<Content> _contents;
    
        public virtual ICollection<Petition> SignedPetitions
        {
            get
            {
                if (_signedPetitions == null)
                {
                    var newCollection = new FixupCollection<Petition>();
                    newCollection.CollectionChanged += FixupSignedPetitions;
                    _signedPetitions = newCollection;
                }
                return _signedPetitions;
            }
            set
            {
                if (!ReferenceEquals(_signedPetitions, value))
                {
                    var previousValue = _signedPetitions as FixupCollection<Petition>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSignedPetitions;
                    }
                    _signedPetitions = value;
                    var newValue = value as FixupCollection<Petition>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSignedPetitions;
                    }
                }
            }
        }
        private ICollection<Petition> _signedPetitions;
    
        public virtual Address Address
        {
            get { return _address; }
            set
            {
                if (!ReferenceEquals(_address, value))
                {
                    var previousValue = _address;
                    _address = value;
                    FixupAddress(previousValue);
                }
            }
        }
        private Address _address;
    
        public virtual ICollection<Coauthor> Coauthors
        {
            get
            {
                if (_coauthors == null)
                {
                    var newCollection = new FixupCollection<Coauthor>();
                    newCollection.CollectionChanged += FixupCoauthors;
                    _coauthors = newCollection;
                }
                return _coauthors;
            }
            set
            {
                if (!ReferenceEquals(_coauthors, value))
                {
                    var previousValue = _coauthors as FixupCollection<Coauthor>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCoauthors;
                    }
                    _coauthors = value;
                    var newValue = value as FixupCollection<Coauthor>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCoauthors;
                    }
                }
            }
        }
        private ICollection<Coauthor> _coauthors;
    
        public virtual ICollection<Group> SubscriptionGroups
        {
            get
            {
                if (_subscriptionGroups == null)
                {
                    var newCollection = new FixupCollection<Group>();
                    newCollection.CollectionChanged += FixupSubscriptionGroups;
                    _subscriptionGroups = newCollection;
                }
                return _subscriptionGroups;
            }
            set
            {
                if (!ReferenceEquals(_subscriptionGroups, value))
                {
                    var previousValue = _subscriptionGroups as FixupCollection<Group>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubscriptionGroups;
                    }
                    _subscriptionGroups = value;
                    var newValue = value as FixupCollection<Group>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubscriptionGroups;
                    }
                }
            }
        }
        private ICollection<Group> _subscriptionGroups;
    
        public virtual ICollection<User> Subscribers
        {
            get
            {
                if (_subscribers == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupSubscribers;
                    _subscribers = newCollection;
                }
                return _subscribers;
            }
            set
            {
                if (!ReferenceEquals(_subscribers, value))
                {
                    var previousValue = _subscribers as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubscribers;
                    }
                    _subscribers = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubscribers;
                    }
                }
            }
        }
        private ICollection<User> _subscribers;
    
        public virtual ICollection<User> SubscriptionUsers
        {
            get
            {
                if (_subscriptionUsers == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupSubscriptionUsers;
                    _subscriptionUsers = newCollection;
                }
                return _subscriptionUsers;
            }
            set
            {
                if (!ReferenceEquals(_subscriptionUsers, value))
                {
                    var previousValue = _subscriptionUsers as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubscriptionUsers;
                    }
                    _subscriptionUsers = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubscriptionUsers;
                    }
                }
            }
        }
        private ICollection<User> _subscriptionUsers;
    
        public virtual ICollection<Like> Likes
        {
            get
            {
                if (_likes == null)
                {
                    var newCollection = new FixupCollection<Like>();
                    newCollection.CollectionChanged += FixupLikes;
                    _likes = newCollection;
                }
                return _likes;
            }
            set
            {
                if (!ReferenceEquals(_likes, value))
                {
                    var previousValue = _likes as FixupCollection<Like>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLikes;
                    }
                    _likes = value;
                    var newValue = value as FixupCollection<Like>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLikes;
                    }
                }
            }
        }
        private ICollection<Like> _likes;
    
        public virtual MailRecord MailRecord
        {
            get { return _mailRecord; }
            set
            {
                if (!ReferenceEquals(_mailRecord, value))
                {
                    var previousValue = _mailRecord;
                    _mailRecord = value;
                    FixupMailRecord(previousValue);
                }
            }
        }
        private MailRecord _mailRecord;
    
        public virtual ICollection<Badge> Badges
        {
            get
            {
                if (_badges == null)
                {
                    var newCollection = new FixupCollection<Badge>();
                    newCollection.CollectionChanged += FixupBadges;
                    _badges = newCollection;
                }
                return _badges;
            }
            set
            {
                if (!ReferenceEquals(_badges, value))
                {
                    var previousValue = _badges as FixupCollection<Badge>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBadges;
                    }
                    _badges = value;
                    var newValue = value as FixupCollection<Badge>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBadges;
                    }
                }
            }
        }
        private ICollection<Badge> _badges;
    
        public virtual ICollection<Attach> Attachs
        {
            get
            {
                if (_attachs == null)
                {
                    var newCollection = new FixupCollection<Attach>();
                    newCollection.CollectionChanged += FixupAttachs;
                    _attachs = newCollection;
                }
                return _attachs;
            }
            set
            {
                if (!ReferenceEquals(_attachs, value))
                {
                    var previousValue = _attachs as FixupCollection<Attach>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAttachs;
                    }
                    _attachs = value;
                    var newValue = value as FixupCollection<Attach>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAttachs;
                    }
                }
            }
        }
        private ICollection<Attach> _attachs;
    
        public virtual ICollection<Album> Albums
        {
            get
            {
                if (_albums == null)
                {
                    var newCollection = new FixupCollection<Album>();
                    newCollection.CollectionChanged += FixupAlbums;
                    _albums = newCollection;
                }
                return _albums;
            }
            set
            {
                if (!ReferenceEquals(_albums, value))
                {
                    var previousValue = _albums as FixupCollection<Album>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAlbums;
                    }
                    _albums = value;
                    var newValue = value as FixupCollection<Album>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAlbums;
                    }
                }
            }
        }
        private ICollection<Album> _albums;
    
        public virtual ICollection<ProfileChangeRequest> ProfileChangeRequest
        {
            get
            {
                if (_profileChangeRequest == null)
                {
                    var newCollection = new FixupCollection<ProfileChangeRequest>();
                    newCollection.CollectionChanged += FixupProfileChangeRequest;
                    _profileChangeRequest = newCollection;
                }
                return _profileChangeRequest;
            }
            set
            {
                if (!ReferenceEquals(_profileChangeRequest, value))
                {
                    var previousValue = _profileChangeRequest as FixupCollection<ProfileChangeRequest>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProfileChangeRequest;
                    }
                    _profileChangeRequest = value;
                    var newValue = value as FixupCollection<ProfileChangeRequest>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProfileChangeRequest;
                    }
                }
            }
        }
        private ICollection<ProfileChangeRequest> _profileChangeRequest;
    
        public virtual ICollection<SocialAccount> SocialAccounts
        {
            get
            {
                if (_socialAccounts == null)
                {
                    var newCollection = new FixupCollection<SocialAccount>();
                    newCollection.CollectionChanged += FixupSocialAccounts;
                    _socialAccounts = newCollection;
                }
                return _socialAccounts;
            }
            set
            {
                if (!ReferenceEquals(_socialAccounts, value))
                {
                    var previousValue = _socialAccounts as FixupCollection<SocialAccount>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSocialAccounts;
                    }
                    _socialAccounts = value;
                    var newValue = value as FixupCollection<SocialAccount>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSocialAccounts;
                    }
                }
            }
        }
        private ICollection<SocialAccount> _socialAccounts;
    
        public virtual ICollection<SurveyBulletin> SurveyBulletins
        {
            get
            {
                if (_surveyBulletins == null)
                {
                    var newCollection = new FixupCollection<SurveyBulletin>();
                    newCollection.CollectionChanged += FixupSurveyBulletins;
                    _surveyBulletins = newCollection;
                }
                return _surveyBulletins;
            }
            set
            {
                if (!ReferenceEquals(_surveyBulletins, value))
                {
                    var previousValue = _surveyBulletins as FixupCollection<SurveyBulletin>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSurveyBulletins;
                    }
                    _surveyBulletins = value;
                    var newValue = value as FixupCollection<SurveyBulletin>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSurveyBulletins;
                    }
                }
            }
        }
        private ICollection<SurveyBulletin> _surveyBulletins;
    
        public virtual ICollection<User> BlackList
        {
            get
            {
                if (_blackList == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupBlackList;
                    _blackList = newCollection;
                }
                return _blackList;
            }
            set
            {
                if (!ReferenceEquals(_blackList, value))
                {
                    var previousValue = _blackList as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBlackList;
                    }
                    _blackList = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBlackList;
                    }
                }
            }
        }
        private ICollection<User> _blackList;
    
        public virtual ICollection<User> BlackListsOwners
        {
            get
            {
                if (_blackListsOwners == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupBlackListsOwners;
                    _blackListsOwners = newCollection;
                }
                return _blackListsOwners;
            }
            set
            {
                if (!ReferenceEquals(_blackListsOwners, value))
                {
                    var previousValue = _blackListsOwners as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBlackListsOwners;
                    }
                    _blackListsOwners = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBlackListsOwners;
                    }
                }
            }
        }
        private ICollection<User> _blackListsOwners;
    
        public virtual ICollection<PayPalVerification> PayPalVerification
        {
            get
            {
                if (_payPalVerification == null)
                {
                    var newCollection = new FixupCollection<PayPalVerification>();
                    newCollection.CollectionChanged += FixupPayPalVerification;
                    _payPalVerification = newCollection;
                }
                return _payPalVerification;
            }
            set
            {
                if (!ReferenceEquals(_payPalVerification, value))
                {
                    var previousValue = _payPalVerification as FixupCollection<PayPalVerification>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPayPalVerification;
                    }
                    _payPalVerification = value;
                    var newValue = value as FixupCollection<PayPalVerification>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPayPalVerification;
                    }
                }
            }
        }
        private ICollection<PayPalVerification> _payPalVerification;
    
        public virtual SubscriptionSettings SubscriptionSettings
        {
            get { return _subscriptionSettings; }
            set
            {
                if (!ReferenceEquals(_subscriptionSettings, value))
                {
                    var previousValue = _subscriptionSettings;
                    _subscriptionSettings = value;
                    FixupSubscriptionSettings(previousValue);
                }
            }
        }
        private SubscriptionSettings _subscriptionSettings;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupBirthAddress(Address previousValue)
        {
            if (previousValue != null && previousValue.BornedUsers.Contains(this))
            {
                previousValue.BornedUsers.Remove(this);
            }
    
            if (BirthAddress != null)
            {
                if (!BirthAddress.BornedUsers.Contains(this))
                {
                    BirthAddress.BornedUsers.Add(this);
                }
                if (BirthAddressId != BirthAddress.Id)
                {
                    BirthAddressId = BirthAddress.Id;
                }
            }
            else if (!_settingFK)
            {
                BirthAddressId = null;
            }
        }
    
        private void FixupAddress(Address previousValue)
        {
            if (previousValue != null && previousValue.ResidentUsers.Contains(this))
            {
                previousValue.ResidentUsers.Remove(this);
            }
    
            if (Address != null)
            {
                if (!Address.ResidentUsers.Contains(this))
                {
                    Address.ResidentUsers.Add(this);
                }
                if (AddressId != Address.Id)
                {
                    AddressId = Address.Id;
                }
            }
            else if (!_settingFK)
            {
                AddressId = null;
            }
        }
    
        private void FixupMailRecord(MailRecord previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.User, this))
            {
                previousValue.User = null;
            }
    
            if (MailRecord != null)
            {
                MailRecord.User = this;
            }
        }
    
        private void FixupSubscriptionSettings(SubscriptionSettings previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.User, this))
            {
                previousValue.User = null;
            }
    
            if (SubscriptionSettings != null)
            {
                SubscriptionSettings.User = this;
            }
        }
    
        private void FixupGroupMembers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GroupMember item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GroupMember item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupContents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Content item in e.NewItems)
                {
                    item.Author = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Content item in e.OldItems)
                {
                    if (ReferenceEquals(item.Author, this))
                    {
                        item.Author = null;
                    }
                }
            }
        }
    
        private void FixupSignedPetitions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Petition item in e.NewItems)
                {
                    if (!item.Signers.Contains(this))
                    {
                        item.Signers.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Petition item in e.OldItems)
                {
                    if (item.Signers.Contains(this))
                    {
                        item.Signers.Remove(this);
                    }
                }
            }
        }
    
        private void FixupCoauthors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Coauthor item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Coauthor item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupSubscriptionGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Group item in e.NewItems)
                {
                    if (!item.Subscribers.Contains(this))
                    {
                        item.Subscribers.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Group item in e.OldItems)
                {
                    if (item.Subscribers.Contains(this))
                    {
                        item.Subscribers.Remove(this);
                    }
                }
            }
        }
    
        private void FixupSubscribers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.SubscriptionUsers.Contains(this))
                    {
                        item.SubscriptionUsers.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.SubscriptionUsers.Contains(this))
                    {
                        item.SubscriptionUsers.Remove(this);
                    }
                }
            }
        }
    
        private void FixupSubscriptionUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.Subscribers.Contains(this))
                    {
                        item.Subscribers.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.Subscribers.Contains(this))
                    {
                        item.Subscribers.Remove(this);
                    }
                }
            }
        }
    
        private void FixupLikes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Like item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Like item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupBadges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Badge item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Badge item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupAttachs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Attach item in e.NewItems)
                {
                    if (!item.Users.Contains(this))
                    {
                        item.Users.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attach item in e.OldItems)
                {
                    if (item.Users.Contains(this))
                    {
                        item.Users.Remove(this);
                    }
                }
            }
        }
    
        private void FixupAlbums(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Album item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Album item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupProfileChangeRequest(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ProfileChangeRequest item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProfileChangeRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupSocialAccounts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SocialAccount item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SocialAccount item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupSurveyBulletins(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SurveyBulletin item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SurveyBulletin item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }
    
        private void FixupBlackList(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.BlackListsOwners.Contains(this))
                    {
                        item.BlackListsOwners.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.BlackListsOwners.Contains(this))
                    {
                        item.BlackListsOwners.Remove(this);
                    }
                }
            }
        }
    
        private void FixupBlackListsOwners(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.BlackList.Contains(this))
                    {
                        item.BlackList.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.BlackList.Contains(this))
                    {
                        item.BlackList.Remove(this);
                    }
                }
            }
        }
    
        private void FixupPayPalVerification(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PayPalVerification item in e.NewItems)
                {
                    item.User = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PayPalVerification item in e.OldItems)
                {
                    if (ReferenceEquals(item.User, this))
                    {
                        item.User = null;
                    }
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class Badge
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Type
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> UserId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userId != value)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                        _userId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _userId;
    
        public virtual Nullable<System.Guid> GroupId
        {
            get { return _groupId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_groupId != value)
                    {
                        if (Group != null && Group.Id != value)
                        {
                            Group = null;
                        }
                        _groupId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _groupId;
    
        public virtual bool IsAcquired
        {
            get { return _isAcquired; }
            set { _isAcquired = value; }
        }
        private bool _isAcquired = false;
    
        public virtual Nullable<int> Value
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual string Image
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> AcquireDate
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual Group Group
        {
            get { return _group; }
            set
            {
                if (!ReferenceEquals(_group, value))
                {
                    var previousValue = _group;
                    _group = value;
                    FixupGroup(previousValue);
                }
            }
        }
        private Group _group;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Badges.Contains(this))
            {
                previousValue.Badges.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Badges.Contains(this))
                {
                    User.Badges.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
            else if (!_settingFK)
            {
                UserId = null;
            }
        }
    
        private void FixupGroup(Group previousValue)
        {
            if (previousValue != null && previousValue.Badges.Contains(this))
            {
                previousValue.Badges.Remove(this);
            }
    
            if (Group != null)
            {
                if (!Group.Badges.Contains(this))
                {
                    Group.Badges.Add(this);
                }
                if (GroupId != Group.Id)
                {
                    GroupId = Group.Id;
                }
            }
            else if (!_settingFK)
            {
                GroupId = null;
            }
        }

        #endregion

    }
}

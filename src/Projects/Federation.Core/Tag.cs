//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class Tag
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual bool IsRecommended
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> GroupId
        {
            get { return _groupId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_groupId != value)
                    {
                        if (Group != null && Group.Id != value)
                        {
                            Group = null;
                        }
                        _groupId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _groupId;
    
        public virtual byte TopicState
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual int Weight
        {
            get;
            set;
        }
    
        public virtual string LowerTitle
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Expert> Experts
        {
            get
            {
                if (_experts == null)
                {
                    var newCollection = new FixupCollection<Expert>();
                    newCollection.CollectionChanged += FixupExperts;
                    _experts = newCollection;
                }
                return _experts;
            }
            set
            {
                if (!ReferenceEquals(_experts, value))
                {
                    var previousValue = _experts as FixupCollection<Expert>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupExperts;
                    }
                    _experts = value;
                    var newValue = value as FixupCollection<Expert>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupExperts;
                    }
                }
            }
        }
        private ICollection<Expert> _experts;
    
        public virtual ICollection<ExpertVote> ExpertVotes
        {
            get
            {
                if (_expertVotes == null)
                {
                    var newCollection = new FixupCollection<ExpertVote>();
                    newCollection.CollectionChanged += FixupExpertVotes;
                    _expertVotes = newCollection;
                }
                return _expertVotes;
            }
            set
            {
                if (!ReferenceEquals(_expertVotes, value))
                {
                    var previousValue = _expertVotes as FixupCollection<ExpertVote>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupExpertVotes;
                    }
                    _expertVotes = value;
                    var newValue = value as FixupCollection<ExpertVote>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupExpertVotes;
                    }
                }
            }
        }
        private ICollection<ExpertVote> _expertVotes;
    
        public virtual ICollection<Content> Contents
        {
            get
            {
                if (_contents == null)
                {
                    var newCollection = new FixupCollection<Content>();
                    newCollection.CollectionChanged += FixupContents;
                    _contents = newCollection;
                }
                return _contents;
            }
            set
            {
                if (!ReferenceEquals(_contents, value))
                {
                    var previousValue = _contents as FixupCollection<Content>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupContents;
                    }
                    _contents = value;
                    var newValue = value as FixupCollection<Content>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupContents;
                    }
                }
            }
        }
        private ICollection<Content> _contents;
    
        public virtual Group Group
        {
            get { return _group; }
            set
            {
                if (!ReferenceEquals(_group, value))
                {
                    var previousValue = _group;
                    _group = value;
                    FixupGroup(previousValue);
                }
            }
        }
        private Group _group;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupGroup(Group previousValue)
        {
            if (previousValue != null && previousValue.Tags.Contains(this))
            {
                previousValue.Tags.Remove(this);
            }
    
            if (Group != null)
            {
                if (!Group.Tags.Contains(this))
                {
                    Group.Tags.Add(this);
                }
                if (GroupId != Group.Id)
                {
                    GroupId = Group.Id;
                }
            }
            else if (!_settingFK)
            {
                GroupId = null;
            }
        }
    
        private void FixupExperts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Expert item in e.NewItems)
                {
                    if (!item.Tags.Contains(this))
                    {
                        item.Tags.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Expert item in e.OldItems)
                {
                    if (item.Tags.Contains(this))
                    {
                        item.Tags.Remove(this);
                    }
                }
            }
        }
    
        private void FixupExpertVotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ExpertVote item in e.NewItems)
                {
                    item.Tag = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ExpertVote item in e.OldItems)
                {
                    if (ReferenceEquals(item.Tag, this))
                    {
                        item.Tag = null;
                    }
                }
            }
        }
    
        private void FixupContents(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Content item in e.NewItems)
                {
                    if (!item.Tags.Contains(this))
                    {
                        item.Tags.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Content item in e.OldItems)
                {
                    if (item.Tags.Contains(this))
                    {
                        item.Tags.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class Content
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> AuthorId
        {
            get { return _authorId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_authorId != value)
                    {
                        if (Author != null && Author.Id != value)
                        {
                            Author = null;
                        }
                        _authorId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _authorId;
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual string Text
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreationDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> PublishDate
        {
            get;
            set;
        }
    
        public virtual byte State
        {
            get;
            set;
        }
    
        public virtual bool IsDiscussionClosed
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> GroupId
        {
            get { return _groupId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_groupId != value)
                    {
                        if (Group != null && Group.Id != value)
                        {
                            Group = null;
                        }
                        _groupId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _groupId;
    
        public virtual bool IsHidden
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Comment> Comments
        {
            get
            {
                if (_comments == null)
                {
                    var newCollection = new FixupCollection<Comment>();
                    newCollection.CollectionChanged += FixupComments;
                    _comments = newCollection;
                }
                return _comments;
            }
            set
            {
                if (!ReferenceEquals(_comments, value))
                {
                    var previousValue = _comments as FixupCollection<Comment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupComments;
                    }
                    _comments = value;
                    var newValue = value as FixupCollection<Comment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupComments;
                    }
                }
            }
        }
        private ICollection<Comment> _comments;
    
        public virtual ICollection<Tag> Tags
        {
            get
            {
                if (_tags == null)
                {
                    var newCollection = new FixupCollection<Tag>();
                    newCollection.CollectionChanged += FixupTags;
                    _tags = newCollection;
                }
                return _tags;
            }
            set
            {
                if (!ReferenceEquals(_tags, value))
                {
                    var previousValue = _tags as FixupCollection<Tag>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTags;
                    }
                    _tags = value;
                    var newValue = value as FixupCollection<Tag>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTags;
                    }
                }
            }
        }
        private ICollection<Tag> _tags;
    
        public virtual User Author
        {
            get { return _author; }
            set
            {
                if (!ReferenceEquals(_author, value))
                {
                    var previousValue = _author;
                    _author = value;
                    FixupAuthor(previousValue);
                }
            }
        }
        private User _author;
    
        public virtual Attach Attach
        {
            get { return _attach; }
            set
            {
                if (!ReferenceEquals(_attach, value))
                {
                    var previousValue = _attach;
                    _attach = value;
                    FixupAttach(previousValue);
                }
            }
        }
        private Attach _attach;
    
        public virtual Group Group
        {
            get { return _group; }
            set
            {
                if (!ReferenceEquals(_group, value))
                {
                    var previousValue = _group;
                    _group = value;
                    FixupGroup(previousValue);
                }
            }
        }
        private Group _group;
    
        public virtual ICollection<Like> Likes
        {
            get
            {
                if (_likes == null)
                {
                    var newCollection = new FixupCollection<Like>();
                    newCollection.CollectionChanged += FixupLikes;
                    _likes = newCollection;
                }
                return _likes;
            }
            set
            {
                if (!ReferenceEquals(_likes, value))
                {
                    var previousValue = _likes as FixupCollection<Like>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLikes;
                    }
                    _likes = value;
                    var newValue = value as FixupCollection<Like>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLikes;
                    }
                }
            }
        }
        private ICollection<Like> _likes;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAuthor(User previousValue)
        {
            if (previousValue != null && previousValue.Contents.Contains(this))
            {
                previousValue.Contents.Remove(this);
            }
    
            if (Author != null)
            {
                if (!Author.Contents.Contains(this))
                {
                    Author.Contents.Add(this);
                }
                if (AuthorId != Author.Id)
                {
                    AuthorId = Author.Id;
                }
            }
            else if (!_settingFK)
            {
                AuthorId = null;
            }
        }
    
        private void FixupAttach(Attach previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Content, this))
            {
                previousValue.Content = null;
            }
    
            if (Attach != null)
            {
                Attach.Content = this;
            }
        }
    
        private void FixupGroup(Group previousValue)
        {
            if (previousValue != null && previousValue.Content.Contains(this))
            {
                previousValue.Content.Remove(this);
            }
    
            if (Group != null)
            {
                if (!Group.Content.Contains(this))
                {
                    Group.Content.Add(this);
                }
                if (GroupId != Group.Id)
                {
                    GroupId = Group.Id;
                }
            }
            else if (!_settingFK)
            {
                GroupId = null;
            }
        }
    
        private void FixupComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    item.Content = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (ReferenceEquals(item.Content, this))
                    {
                        item.Content = null;
                    }
                }
            }
        }
    
        private void FixupTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Tag item in e.NewItems)
                {
                    if (!item.Contents.Contains(this))
                    {
                        item.Contents.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tag item in e.OldItems)
                {
                    if (item.Contents.Contains(this))
                    {
                        item.Contents.Remove(this);
                    }
                }
            }
        }
    
        private void FixupLikes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Like item in e.NewItems)
                {
                    item.Content = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Like item in e.OldItems)
                {
                    if (ReferenceEquals(item.Content, this))
                    {
                        item.Content = null;
                    }
                }
            }
        }

        #endregion

    }
}

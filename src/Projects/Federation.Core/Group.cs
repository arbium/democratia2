//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class Group
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual short ModeratorsCount
        {
            get;
            set;
        }
    
        public virtual short ElectionFrequency
        {
            get;
            set;
        }
    
        public virtual short Privacy
        {
            get { return _privacy; }
            set { _privacy = value; }
        }
        private short _privacy = 0;
    
        public virtual byte State
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Summary
        {
            get;
            set;
        }
    
        public virtual string Logo
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreationDate
        {
            get;
            set;
        }
    
        public virtual string Label
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> ParentGroupId
        {
            get { return _parentGroupId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentGroupId != value)
                    {
                        if (ParentGroup != null && ParentGroup.Id != value)
                        {
                            ParentGroup = null;
                        }
                        _parentGroupId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _parentGroupId;
    
        public virtual byte Type
        {
            get { return _type; }
            set { _type = value; }
        }
        private byte _type = 0;
    
        public virtual byte PollQuorum
        {
            get { return _pollQuorum; }
            set { _pollQuorum = value; }
        }
        private byte _pollQuorum = 20;
    
        public virtual byte ElectionQuorum
        {
            get { return _electionQuorum; }
            set { _electionQuorum = value; }
        }
        private byte _electionQuorum = 30;

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<GroupMember> GroupMembers
        {
            get
            {
                if (_groupMembers == null)
                {
                    var newCollection = new FixupCollection<GroupMember>();
                    newCollection.CollectionChanged += FixupGroupMembers;
                    _groupMembers = newCollection;
                }
                return _groupMembers;
            }
            set
            {
                if (!ReferenceEquals(_groupMembers, value))
                {
                    var previousValue = _groupMembers as FixupCollection<GroupMember>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGroupMembers;
                    }
                    _groupMembers = value;
                    var newValue = value as FixupCollection<GroupMember>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGroupMembers;
                    }
                }
            }
        }
        private ICollection<GroupMember> _groupMembers;
    
        public virtual ICollection<Group> ChildGroups
        {
            get
            {
                if (_childGroups == null)
                {
                    var newCollection = new FixupCollection<Group>();
                    newCollection.CollectionChanged += FixupChildGroups;
                    _childGroups = newCollection;
                }
                return _childGroups;
            }
            set
            {
                if (!ReferenceEquals(_childGroups, value))
                {
                    var previousValue = _childGroups as FixupCollection<Group>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChildGroups;
                    }
                    _childGroups = value;
                    var newValue = value as FixupCollection<Group>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChildGroups;
                    }
                }
            }
        }
        private ICollection<Group> _childGroups;
    
        public virtual Group ParentGroup
        {
            get { return _parentGroup; }
            set
            {
                if (!ReferenceEquals(_parentGroup, value))
                {
                    var previousValue = _parentGroup;
                    _parentGroup = value;
                    FixupParentGroup(previousValue);
                }
            }
        }
        private Group _parentGroup;
    
        public virtual ICollection<User> Subscribers
        {
            get
            {
                if (_subscribers == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupSubscribers;
                    _subscribers = newCollection;
                }
                return _subscribers;
            }
            set
            {
                if (!ReferenceEquals(_subscribers, value))
                {
                    var previousValue = _subscribers as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSubscribers;
                    }
                    _subscribers = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSubscribers;
                    }
                }
            }
        }
        private ICollection<User> _subscribers;
    
        public virtual ICollection<Badge> Badges
        {
            get
            {
                if (_badges == null)
                {
                    var newCollection = new FixupCollection<Badge>();
                    newCollection.CollectionChanged += FixupBadges;
                    _badges = newCollection;
                }
                return _badges;
            }
            set
            {
                if (!ReferenceEquals(_badges, value))
                {
                    var previousValue = _badges as FixupCollection<Badge>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBadges;
                    }
                    _badges = value;
                    var newValue = value as FixupCollection<Badge>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBadges;
                    }
                }
            }
        }
        private ICollection<Badge> _badges;
    
        public virtual ICollection<Content> Content
        {
            get
            {
                if (_content == null)
                {
                    var newCollection = new FixupCollection<Content>();
                    newCollection.CollectionChanged += FixupContent;
                    _content = newCollection;
                }
                return _content;
            }
            set
            {
                if (!ReferenceEquals(_content, value))
                {
                    var previousValue = _content as FixupCollection<Content>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupContent;
                    }
                    _content = value;
                    var newValue = value as FixupCollection<Content>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupContent;
                    }
                }
            }
        }
        private ICollection<Content> _content;
    
        public virtual ICollection<Attach> Attachs
        {
            get
            {
                if (_attachs == null)
                {
                    var newCollection = new FixupCollection<Attach>();
                    newCollection.CollectionChanged += FixupAttachs;
                    _attachs = newCollection;
                }
                return _attachs;
            }
            set
            {
                if (!ReferenceEquals(_attachs, value))
                {
                    var previousValue = _attachs as FixupCollection<Attach>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAttachs;
                    }
                    _attachs = value;
                    var newValue = value as FixupCollection<Attach>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAttachs;
                    }
                }
            }
        }
        private ICollection<Attach> _attachs;
    
        public virtual ICollection<Album> Albums
        {
            get
            {
                if (_albums == null)
                {
                    var newCollection = new FixupCollection<Album>();
                    newCollection.CollectionChanged += FixupAlbums;
                    _albums = newCollection;
                }
                return _albums;
            }
            set
            {
                if (!ReferenceEquals(_albums, value))
                {
                    var previousValue = _albums as FixupCollection<Album>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAlbums;
                    }
                    _albums = value;
                    var newValue = value as FixupCollection<Album>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAlbums;
                    }
                }
            }
        }
        private ICollection<Album> _albums;
    
        public virtual ICollection<Tag> Tags
        {
            get
            {
                if (_tags == null)
                {
                    var newCollection = new FixupCollection<Tag>();
                    newCollection.CollectionChanged += FixupTags;
                    _tags = newCollection;
                }
                return _tags;
            }
            set
            {
                if (!ReferenceEquals(_tags, value))
                {
                    var previousValue = _tags as FixupCollection<Tag>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTags;
                    }
                    _tags = value;
                    var newValue = value as FixupCollection<Tag>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTags;
                    }
                }
            }
        }
        private ICollection<Tag> _tags;
    
        public virtual ICollection<GroupCategory> Categories
        {
            get
            {
                if (_categories == null)
                {
                    var newCollection = new FixupCollection<GroupCategory>();
                    newCollection.CollectionChanged += FixupCategories;
                    _categories = newCollection;
                }
                return _categories;
            }
            set
            {
                if (!ReferenceEquals(_categories, value))
                {
                    var previousValue = _categories as FixupCollection<GroupCategory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCategories;
                    }
                    _categories = value;
                    var newValue = value as FixupCollection<GroupCategory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCategories;
                    }
                }
            }
        }
        private ICollection<GroupCategory> _categories;
    
        public virtual GroupRating GroupRating
        {
            get { return _groupRating; }
            set
            {
                if (!ReferenceEquals(_groupRating, value))
                {
                    var previousValue = _groupRating;
                    _groupRating = value;
                    FixupGroupRating(previousValue);
                }
            }
        }
        private GroupRating _groupRating;
    
        public virtual ICollection<Group> FriendlyGroups
        {
            get
            {
                if (_friendlyGroups == null)
                {
                    _friendlyGroups = new FixupCollection<Group>();
                }
                return _friendlyGroups;
            }
            set
            {
                _friendlyGroups = value;
            }
        }
        private ICollection<Group> _friendlyGroups;
    
        public virtual GroupAd GroupAd
        {
            get { return _groupAd; }
            set
            {
                if (!ReferenceEquals(_groupAd, value))
                {
                    var previousValue = _groupAd;
                    _groupAd = value;
                    FixupGroupAd(previousValue);
                }
            }
        }
        private GroupAd _groupAd;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupParentGroup(Group previousValue)
        {
            if (previousValue != null && previousValue.ChildGroups.Contains(this))
            {
                previousValue.ChildGroups.Remove(this);
            }
    
            if (ParentGroup != null)
            {
                if (!ParentGroup.ChildGroups.Contains(this))
                {
                    ParentGroup.ChildGroups.Add(this);
                }
                if (ParentGroupId != ParentGroup.Id)
                {
                    ParentGroupId = ParentGroup.Id;
                }
            }
            else if (!_settingFK)
            {
                ParentGroupId = null;
            }
        }
    
        private void FixupGroupRating(GroupRating previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Group, this))
            {
                previousValue.Group = null;
            }
    
            if (GroupRating != null)
            {
                GroupRating.Group = this;
            }
        }
    
        private void FixupGroupAd(GroupAd previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Group, this))
            {
                previousValue.Group = null;
            }
    
            if (GroupAd != null)
            {
                GroupAd.Group = this;
            }
        }
    
        private void FixupGroupMembers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GroupMember item in e.NewItems)
                {
                    item.Group = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GroupMember item in e.OldItems)
                {
                    if (ReferenceEquals(item.Group, this))
                    {
                        item.Group = null;
                    }
                }
            }
        }
    
        private void FixupChildGroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Group item in e.NewItems)
                {
                    item.ParentGroup = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Group item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentGroup, this))
                    {
                        item.ParentGroup = null;
                    }
                }
            }
        }
    
        private void FixupSubscribers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.SubscriptionGroups.Contains(this))
                    {
                        item.SubscriptionGroups.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.SubscriptionGroups.Contains(this))
                    {
                        item.SubscriptionGroups.Remove(this);
                    }
                }
            }
        }
    
        private void FixupBadges(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Badge item in e.NewItems)
                {
                    item.Group = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Badge item in e.OldItems)
                {
                    if (ReferenceEquals(item.Group, this))
                    {
                        item.Group = null;
                    }
                }
            }
        }
    
        private void FixupContent(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Content item in e.NewItems)
                {
                    item.Group = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Content item in e.OldItems)
                {
                    if (ReferenceEquals(item.Group, this))
                    {
                        item.Group = null;
                    }
                }
            }
        }
    
        private void FixupAttachs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Attach item in e.NewItems)
                {
                    if (!item.Groups.Contains(this))
                    {
                        item.Groups.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attach item in e.OldItems)
                {
                    if (item.Groups.Contains(this))
                    {
                        item.Groups.Remove(this);
                    }
                }
            }
        }
    
        private void FixupAlbums(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Album item in e.NewItems)
                {
                    item.Group = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Album item in e.OldItems)
                {
                    if (ReferenceEquals(item.Group, this))
                    {
                        item.Group = null;
                    }
                }
            }
        }
    
        private void FixupTags(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Tag item in e.NewItems)
                {
                    item.Group = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tag item in e.OldItems)
                {
                    if (ReferenceEquals(item.Group, this))
                    {
                        item.Group = null;
                    }
                }
            }
        }
    
        private void FixupCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GroupCategory item in e.NewItems)
                {
                    if (!item.Groups.Contains(this))
                    {
                        item.Groups.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GroupCategory item in e.OldItems)
                {
                    if (item.Groups.Contains(this))
                    {
                        item.Groups.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}

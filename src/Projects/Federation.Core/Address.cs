//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class Address
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual string PostalCode
        {
            get;
            set;
        }
    
        public virtual string Street
        {
            get;
            set;
        }
    
        public virtual string House
        {
            get;
            set;
        }
    
        public virtual string Apartment
        {
            get;
            set;
        }
    
        public virtual System.Guid CityId
        {
            get { return _cityId; }
            set
            {
                if (_cityId != value)
                {
                    if (City != null && City.Id != value)
                    {
                        City = null;
                    }
                    _cityId = value;
                }
            }
        }
        private System.Guid _cityId;

        #endregion

        #region Navigation Properties
    
        public virtual City City
        {
            get { return _city; }
            set
            {
                if (!ReferenceEquals(_city, value))
                {
                    var previousValue = _city;
                    _city = value;
                    FixupCity(previousValue);
                }
            }
        }
        private City _city;
    
        public virtual ICollection<User> BornedUsers
        {
            get
            {
                if (_bornedUsers == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupBornedUsers;
                    _bornedUsers = newCollection;
                }
                return _bornedUsers;
            }
            set
            {
                if (!ReferenceEquals(_bornedUsers, value))
                {
                    var previousValue = _bornedUsers as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBornedUsers;
                    }
                    _bornedUsers = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBornedUsers;
                    }
                }
            }
        }
        private ICollection<User> _bornedUsers;
    
        public virtual ICollection<User> ResidentUsers
        {
            get
            {
                if (_residentUsers == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupResidentUsers;
                    _residentUsers = newCollection;
                }
                return _residentUsers;
            }
            set
            {
                if (!ReferenceEquals(_residentUsers, value))
                {
                    var previousValue = _residentUsers as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupResidentUsers;
                    }
                    _residentUsers = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupResidentUsers;
                    }
                }
            }
        }
        private ICollection<User> _residentUsers;

        #endregion

        #region Association Fixup
    
        private void FixupCity(City previousValue)
        {
            if (previousValue != null && previousValue.Addresses.Contains(this))
            {
                previousValue.Addresses.Remove(this);
            }
    
            if (City != null)
            {
                if (!City.Addresses.Contains(this))
                {
                    City.Addresses.Add(this);
                }
                if (CityId != City.Id)
                {
                    CityId = City.Id;
                }
            }
        }
    
        private void FixupBornedUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.BirthAddress = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.BirthAddress, this))
                    {
                        item.BirthAddress = null;
                    }
                }
            }
        }
    
        private void FixupResidentUsers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    item.Address = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (ReferenceEquals(item.Address, this))
                    {
                        item.Address = null;
                    }
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class BaseUser
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual BlockedRecord BlockedUserRecord
        {
            get { return _blockedUserRecord; }
            set
            {
                if (!ReferenceEquals(_blockedUserRecord, value))
                {
                    var previousValue = _blockedUserRecord;
                    _blockedUserRecord = value;
                    FixupBlockedUserRecord(previousValue);
                }
            }
        }
        private BlockedRecord _blockedUserRecord;
    
        public virtual ICollection<Invite> Invites
        {
            get
            {
                if (_invites == null)
                {
                    var newCollection = new FixupCollection<Invite>();
                    newCollection.CollectionChanged += FixupInvites;
                    _invites = newCollection;
                }
                return _invites;
            }
            set
            {
                if (!ReferenceEquals(_invites, value))
                {
                    var previousValue = _invites as FixupCollection<Invite>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInvites;
                    }
                    _invites = value;
                    var newValue = value as FixupCollection<Invite>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInvites;
                    }
                }
            }
        }
        private ICollection<Invite> _invites;
    
        public virtual Invite InviteTicket
        {
            get { return _inviteTicket; }
            set
            {
                if (!ReferenceEquals(_inviteTicket, value))
                {
                    var previousValue = _inviteTicket;
                    _inviteTicket = value;
                    FixupInviteTicket(previousValue);
                }
            }
        }
        private Invite _inviteTicket;
    
        public virtual ICollection<Message> OutboxMessages
        {
            get
            {
                if (_outboxMessages == null)
                {
                    var newCollection = new FixupCollection<Message>();
                    newCollection.CollectionChanged += FixupOutboxMessages;
                    _outboxMessages = newCollection;
                }
                return _outboxMessages;
            }
            set
            {
                if (!ReferenceEquals(_outboxMessages, value))
                {
                    var previousValue = _outboxMessages as FixupCollection<Message>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOutboxMessages;
                    }
                    _outboxMessages = value;
                    var newValue = value as FixupCollection<Message>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOutboxMessages;
                    }
                }
            }
        }
        private ICollection<Message> _outboxMessages;
    
        public virtual ICollection<Message> InboxMessages
        {
            get
            {
                if (_inboxMessages == null)
                {
                    var newCollection = new FixupCollection<Message>();
                    newCollection.CollectionChanged += FixupInboxMessages;
                    _inboxMessages = newCollection;
                }
                return _inboxMessages;
            }
            set
            {
                if (!ReferenceEquals(_inboxMessages, value))
                {
                    var previousValue = _inboxMessages as FixupCollection<Message>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInboxMessages;
                    }
                    _inboxMessages = value;
                    var newValue = value as FixupCollection<Message>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInboxMessages;
                    }
                }
            }
        }
        private ICollection<Message> _inboxMessages;
    
        public virtual ICollection<SmsInfo> SmsInfos
        {
            get
            {
                if (_smsInfos == null)
                {
                    var newCollection = new FixupCollection<SmsInfo>();
                    newCollection.CollectionChanged += FixupSmsInfos;
                    _smsInfos = newCollection;
                }
                return _smsInfos;
            }
            set
            {
                if (!ReferenceEquals(_smsInfos, value))
                {
                    var previousValue = _smsInfos as FixupCollection<SmsInfo>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSmsInfos;
                    }
                    _smsInfos = value;
                    var newValue = value as FixupCollection<SmsInfo>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSmsInfos;
                    }
                }
            }
        }
        private ICollection<SmsInfo> _smsInfos;

        #endregion

        #region Association Fixup
    
        private void FixupBlockedUserRecord(BlockedRecord previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.BaseUser, this))
            {
                previousValue.BaseUser = null;
            }
    
            if (BlockedUserRecord != null)
            {
                BlockedUserRecord.BaseUser = this;
            }
        }
    
        private void FixupInviteTicket(Invite previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.InvitedUser, this))
            {
                previousValue.InvitedUser = null;
            }
    
            if (InviteTicket != null)
            {
                InviteTicket.InvitedUser = this;
            }
        }
    
        private void FixupInvites(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Invite item in e.NewItems)
                {
                    item.Referal = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Invite item in e.OldItems)
                {
                    if (ReferenceEquals(item.Referal, this))
                    {
                        item.Referal = null;
                    }
                }
            }
        }
    
        private void FixupOutboxMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Message item in e.NewItems)
                {
                    item.Author = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Message item in e.OldItems)
                {
                    if (ReferenceEquals(item.Author, this))
                    {
                        item.Author = null;
                    }
                }
            }
        }
    
        private void FixupInboxMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Message item in e.NewItems)
                {
                    item.Recipient = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Message item in e.OldItems)
                {
                    if (ReferenceEquals(item.Recipient, this))
                    {
                        item.Recipient = null;
                    }
                }
            }
        }
    
        private void FixupSmsInfos(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SmsInfo item in e.NewItems)
                {
                    item.BaseUser = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SmsInfo item in e.OldItems)
                {
                    if (ReferenceEquals(item.BaseUser, this))
                    {
                        item.BaseUser = null;
                    }
                }
            }
        }

        #endregion

    }
}

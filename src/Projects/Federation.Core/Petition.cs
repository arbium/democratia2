//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class Petition : Voting
    {
        #region Primitive Properties
    
        public virtual bool IsPrivate
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<User> Signers
        {
            get
            {
                if (_signers == null)
                {
                    var newCollection = new FixupCollection<User>();
                    newCollection.CollectionChanged += FixupSigners;
                    _signers = newCollection;
                }
                return _signers;
            }
            set
            {
                if (!ReferenceEquals(_signers, value))
                {
                    var previousValue = _signers as FixupCollection<User>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSigners;
                    }
                    _signers = value;
                    var newValue = value as FixupCollection<User>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSigners;
                    }
                }
            }
        }
        private ICollection<User> _signers;
    
        public virtual ICollection<Coauthor> Coauthors
        {
            get
            {
                if (_coauthors == null)
                {
                    var newCollection = new FixupCollection<Coauthor>();
                    newCollection.CollectionChanged += FixupCoauthors;
                    _coauthors = newCollection;
                }
                return _coauthors;
            }
            set
            {
                if (!ReferenceEquals(_coauthors, value))
                {
                    var previousValue = _coauthors as FixupCollection<Coauthor>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCoauthors;
                    }
                    _coauthors = value;
                    var newValue = value as FixupCollection<Coauthor>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCoauthors;
                    }
                }
            }
        }
        private ICollection<Coauthor> _coauthors;
    
        public virtual Candidate Candidate
        {
            get { return _candidate; }
            set
            {
                if (!ReferenceEquals(_candidate, value))
                {
                    var previousValue = _candidate;
                    _candidate = value;
                    FixupCandidate(previousValue);
                }
            }
        }
        private Candidate _candidate;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCandidate(Candidate previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.Petition, this))
            {
                previousValue.Petition = null;
            }
    
            if (Candidate != null)
            {
                Candidate.Petition = this;
            }
        }
    
        private void FixupSigners(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (User item in e.NewItems)
                {
                    if (!item.SignedPetitions.Contains(this))
                    {
                        item.SignedPetitions.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (User item in e.OldItems)
                {
                    if (item.SignedPetitions.Contains(this))
                    {
                        item.SignedPetitions.Remove(this);
                    }
                }
            }
        }
    
        private void FixupCoauthors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Coauthor item in e.NewItems)
                {
                    item.Petition = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Coauthor item in e.OldItems)
                {
                    if (ReferenceEquals(item.Petition, this))
                    {
                        item.Petition = null;
                    }
                }
            }
        }

        #endregion

    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class Comment
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual string Text
        {
            get;
            set;
        }
    
        public virtual System.Guid UserId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userId != value)
                    {
                        if (User != null && User.Id != value)
                        {
                            User = null;
                        }
                        _userId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _userId;
    
        public virtual System.Guid ContentId
        {
            get { return _contentId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_contentId != value)
                    {
                        if (Content != null && Content.Id != value)
                        {
                            Content = null;
                        }
                        _contentId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _contentId;
    
        public virtual System.DateTime DateTime
        {
            get;
            set;
        }
    
        public virtual bool IsHidden
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> ParentCommentId
        {
            get { return _parentCommentId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentCommentId != value)
                    {
                        if (ParentComment != null && ParentComment.Id != value)
                        {
                            ParentComment = null;
                        }
                        _parentCommentId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _parentCommentId;
    
        public virtual Nullable<System.Guid> ReplyToId
        {
            get { return _replyToId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_replyToId != value)
                    {
                        if (ReplyTo != null && ReplyTo.Id != value)
                        {
                            ReplyTo = null;
                        }
                        _replyToId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _replyToId;

        #endregion

        #region Navigation Properties
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual Content Content
        {
            get { return _content; }
            set
            {
                if (!ReferenceEquals(_content, value))
                {
                    var previousValue = _content;
                    _content = value;
                    FixupContent(previousValue);
                }
            }
        }
        private Content _content;
    
        public virtual ICollection<Comment> ChidComments
        {
            get
            {
                if (_chidComments == null)
                {
                    var newCollection = new FixupCollection<Comment>();
                    newCollection.CollectionChanged += FixupChidComments;
                    _chidComments = newCollection;
                }
                return _chidComments;
            }
            set
            {
                if (!ReferenceEquals(_chidComments, value))
                {
                    var previousValue = _chidComments as FixupCollection<Comment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChidComments;
                    }
                    _chidComments = value;
                    var newValue = value as FixupCollection<Comment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChidComments;
                    }
                }
            }
        }
        private ICollection<Comment> _chidComments;
    
        public virtual Comment ParentComment
        {
            get { return _parentComment; }
            set
            {
                if (!ReferenceEquals(_parentComment, value))
                {
                    var previousValue = _parentComment;
                    _parentComment = value;
                    FixupParentComment(previousValue);
                }
            }
        }
        private Comment _parentComment;
    
        public virtual ICollection<Comment> Replies
        {
            get
            {
                if (_replies == null)
                {
                    var newCollection = new FixupCollection<Comment>();
                    newCollection.CollectionChanged += FixupReplies;
                    _replies = newCollection;
                }
                return _replies;
            }
            set
            {
                if (!ReferenceEquals(_replies, value))
                {
                    var previousValue = _replies as FixupCollection<Comment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReplies;
                    }
                    _replies = value;
                    var newValue = value as FixupCollection<Comment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReplies;
                    }
                }
            }
        }
        private ICollection<Comment> _replies;
    
        public virtual Comment ReplyTo
        {
            get { return _replyTo; }
            set
            {
                if (!ReferenceEquals(_replyTo, value))
                {
                    var previousValue = _replyTo;
                    _replyTo = value;
                    FixupReplyTo(previousValue);
                }
            }
        }
        private Comment _replyTo;
    
        public virtual ICollection<Like> Likes
        {
            get
            {
                if (_likes == null)
                {
                    var newCollection = new FixupCollection<Like>();
                    newCollection.CollectionChanged += FixupLikes;
                    _likes = newCollection;
                }
                return _likes;
            }
            set
            {
                if (!ReferenceEquals(_likes, value))
                {
                    var previousValue = _likes as FixupCollection<Like>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLikes;
                    }
                    _likes = value;
                    var newValue = value as FixupCollection<Like>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLikes;
                    }
                }
            }
        }
        private ICollection<Like> _likes;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Comments.Contains(this))
            {
                previousValue.Comments.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Comments.Contains(this))
                {
                    User.Comments.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
        }
    
        private void FixupContent(Content previousValue)
        {
            if (previousValue != null && previousValue.Comments.Contains(this))
            {
                previousValue.Comments.Remove(this);
            }
    
            if (Content != null)
            {
                if (!Content.Comments.Contains(this))
                {
                    Content.Comments.Add(this);
                }
                if (ContentId != Content.Id)
                {
                    ContentId = Content.Id;
                }
            }
        }
    
        private void FixupParentComment(Comment previousValue)
        {
            if (previousValue != null && previousValue.ChidComments.Contains(this))
            {
                previousValue.ChidComments.Remove(this);
            }
    
            if (ParentComment != null)
            {
                if (!ParentComment.ChidComments.Contains(this))
                {
                    ParentComment.ChidComments.Add(this);
                }
                if (ParentCommentId != ParentComment.Id)
                {
                    ParentCommentId = ParentComment.Id;
                }
            }
            else if (!_settingFK)
            {
                ParentCommentId = null;
            }
        }
    
        private void FixupReplyTo(Comment previousValue)
        {
            if (previousValue != null && previousValue.Replies.Contains(this))
            {
                previousValue.Replies.Remove(this);
            }
    
            if (ReplyTo != null)
            {
                if (!ReplyTo.Replies.Contains(this))
                {
                    ReplyTo.Replies.Add(this);
                }
                if (ReplyToId != ReplyTo.Id)
                {
                    ReplyToId = ReplyTo.Id;
                }
            }
            else if (!_settingFK)
            {
                ReplyToId = null;
            }
        }
    
        private void FixupChidComments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    item.ParentComment = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentComment, this))
                    {
                        item.ParentComment = null;
                    }
                }
            }
        }
    
        private void FixupReplies(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Comment item in e.NewItems)
                {
                    item.ReplyTo = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Comment item in e.OldItems)
                {
                    if (ReferenceEquals(item.ReplyTo, this))
                    {
                        item.ReplyTo = null;
                    }
                }
            }
        }
    
        private void FixupLikes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Like item in e.NewItems)
                {
                    item.Comment = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Like item in e.OldItems)
                {
                    if (ReferenceEquals(item.Comment, this))
                    {
                        item.Comment = null;
                    }
                }
            }
        }

        #endregion

    }
}

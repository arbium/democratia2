//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class Survey : Voting
    {
        #region Primitive Properties
    
        public virtual byte VariantsCount
        {
            get;
            set;
        }
    
        public virtual bool IsPrivate
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Option> Options
        {
            get
            {
                if (_options == null)
                {
                    var newCollection = new FixupCollection<Option>();
                    newCollection.CollectionChanged += FixupOptions;
                    _options = newCollection;
                }
                return _options;
            }
            set
            {
                if (!ReferenceEquals(_options, value))
                {
                    var previousValue = _options as FixupCollection<Option>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOptions;
                    }
                    _options = value;
                    var newValue = value as FixupCollection<Option>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOptions;
                    }
                }
            }
        }
        private ICollection<Option> _options;
    
        public virtual ICollection<SurveyBulletin> Bulletins
        {
            get
            {
                if (_bulletins == null)
                {
                    var newCollection = new FixupCollection<SurveyBulletin>();
                    newCollection.CollectionChanged += FixupBulletins;
                    _bulletins = newCollection;
                }
                return _bulletins;
            }
            set
            {
                if (!ReferenceEquals(_bulletins, value))
                {
                    var previousValue = _bulletins as FixupCollection<SurveyBulletin>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBulletins;
                    }
                    _bulletins = value;
                    var newValue = value as FixupCollection<SurveyBulletin>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBulletins;
                    }
                }
            }
        }
        private ICollection<SurveyBulletin> _bulletins;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupOptions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Option item in e.NewItems)
                {
                    item.Survey = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Option item in e.OldItems)
                {
                    if (ReferenceEquals(item.Survey, this))
                    {
                        item.Survey = null;
                    }
                }
            }
        }
    
        private void FixupBulletins(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SurveyBulletin item in e.NewItems)
                {
                    item.Survey = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SurveyBulletin item in e.OldItems)
                {
                    if (ReferenceEquals(item.Survey, this))
                    {
                        item.Survey = null;
                    }
                }
            }
        }

        #endregion

    }
}

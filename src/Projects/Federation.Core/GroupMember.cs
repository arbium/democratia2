//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Federation.Core
{
    public partial class GroupMember
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual System.Guid GroupId
        {
            get { return _groupId; }
            set
            {
                if (_groupId != value)
                {
                    if (Group != null && Group.Id != value)
                    {
                        Group = null;
                    }
                    _groupId = value;
                }
            }
        }
        private System.Guid _groupId;
    
        public virtual System.Guid UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    if (User != null && User.Id != value)
                    {
                        User = null;
                    }
                    _userId = value;
                }
            }
        }
        private System.Guid _userId;
    
        public virtual System.DateTime EntryDate
        {
            get;
            set;
        }
    
        public virtual byte State
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> ExitDate
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual Group Group
        {
            get { return _group; }
            set
            {
                if (!ReferenceEquals(_group, value))
                {
                    var previousValue = _group;
                    _group = value;
                    FixupGroup(previousValue);
                }
            }
        }
        private Group _group;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual Expert Expert
        {
            get { return _expert; }
            set
            {
                if (!ReferenceEquals(_expert, value))
                {
                    var previousValue = _expert;
                    _expert = value;
                    FixupExpert(previousValue);
                }
            }
        }
        private Expert _expert;
    
        public virtual ICollection<ExpertVote> ExpertVotes
        {
            get
            {
                if (_expertVotes == null)
                {
                    var newCollection = new FixupCollection<ExpertVote>();
                    newCollection.CollectionChanged += FixupExpertVotes;
                    _expertVotes = newCollection;
                }
                return _expertVotes;
            }
            set
            {
                if (!ReferenceEquals(_expertVotes, value))
                {
                    var previousValue = _expertVotes as FixupCollection<ExpertVote>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupExpertVotes;
                    }
                    _expertVotes = value;
                    var newValue = value as FixupCollection<ExpertVote>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupExpertVotes;
                    }
                }
            }
        }
        private ICollection<ExpertVote> _expertVotes;
    
        public virtual Candidate Candidate
        {
            get { return _candidate; }
            set
            {
                if (!ReferenceEquals(_candidate, value))
                {
                    var previousValue = _candidate;
                    _candidate = value;
                    FixupCandidate(previousValue);
                }
            }
        }
        private Candidate _candidate;
    
        public virtual ICollection<Bulletin> Bulletins
        {
            get
            {
                if (_bulletins == null)
                {
                    var newCollection = new FixupCollection<Bulletin>();
                    newCollection.CollectionChanged += FixupBulletins;
                    _bulletins = newCollection;
                }
                return _bulletins;
            }
            set
            {
                if (!ReferenceEquals(_bulletins, value))
                {
                    var previousValue = _bulletins as FixupCollection<Bulletin>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupBulletins;
                    }
                    _bulletins = value;
                    var newValue = value as FixupCollection<Bulletin>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupBulletins;
                    }
                }
            }
        }
        private ICollection<Bulletin> _bulletins;

        #endregion

        #region Association Fixup
    
        private void FixupGroup(Group previousValue)
        {
            if (previousValue != null && previousValue.GroupMembers.Contains(this))
            {
                previousValue.GroupMembers.Remove(this);
            }
    
            if (Group != null)
            {
                if (!Group.GroupMembers.Contains(this))
                {
                    Group.GroupMembers.Add(this);
                }
                if (GroupId != Group.Id)
                {
                    GroupId = Group.Id;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.GroupMembers.Contains(this))
            {
                previousValue.GroupMembers.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.GroupMembers.Contains(this))
                {
                    User.GroupMembers.Add(this);
                }
                if (UserId != User.Id)
                {
                    UserId = User.Id;
                }
            }
        }
    
        private void FixupExpert(Expert previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.GroupMember, this))
            {
                previousValue.GroupMember = null;
            }
    
            if (Expert != null)
            {
                Expert.GroupMember = this;
            }
        }
    
        private void FixupCandidate(Candidate previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.GroupMember, this))
            {
                previousValue.GroupMember = null;
            }
    
            if (Candidate != null)
            {
                Candidate.GroupMember = this;
            }
        }
    
        private void FixupExpertVotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ExpertVote item in e.NewItems)
                {
                    item.GroupMember = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ExpertVote item in e.OldItems)
                {
                    if (ReferenceEquals(item.GroupMember, this))
                    {
                        item.GroupMember = null;
                    }
                }
            }
        }
    
        private void FixupBulletins(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Bulletin item in e.NewItems)
                {
                    item.Owner = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Bulletin item in e.OldItems)
                {
                    if (ReferenceEquals(item.Owner, this))
                    {
                        item.Owner = null;
                    }
                }
            }
        }

        #endregion

    }
}
